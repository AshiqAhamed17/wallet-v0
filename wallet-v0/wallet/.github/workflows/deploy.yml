name: Deploy to IPFS
on:
  push:
    tags:
      - 'v\d+'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        uses: ./.github/workflows/yarn

      - name: Build next.js app
        uses: ./.github/workflows/build
        with:
          secrets: ${{ toJSON(secrets) }}
          prod: ${{ true }}

      - name: Deploy using web3.storage
        uses: web3-storage/add-to-web3@v3
        id: w3up
        with:
          path_to_add: 'out'
          secret_key: ${{ secrets.W3_PRINCIPAL }}
          proof: ${{ secrets.W3_PROOF }}

      - run: echo  "IPFS_HASH=${{ steps.w3up.outputs.cid }}" >> $GITHUB_ENV

      # Credit to https://github.com/DarkFlorist/Horswap/blob/adf430d7f208431b9e591f64f212a4b895b1ea21/.github/workflows/ipfs-deploy.yml
      - name: Create a release
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Markdown template for the release notes
          RELEASE_NOTE_TEMPLATE=$(cat << EOF
          #### ENS Domain
          Every version of Eternal Safe is connected to an immutable ENS subdomain.

          [https://$GITHUB_REF_NAME.eternalsafe.eth](https://$GITHUB_REF_NAME.eternalsafe.eth)  
          __(Recommended)__ _requires Brave Browser or Metamask Extension_  
          [https://$GITHUB_REF_NAME.eternalsafe.eth.limo](https://$GITHUB_REF_NAME.eternalsafe.eth.limo)  

          #### IPFS Hash

          \`\`\`
          $IPFS_HASH
          \`\`\`

          You can also view this version of Eternal Safe through any IPFS Gateway. Note: only subdomain gateways are supported.

          [ipfs://$IPFS_HASH](ipfs://$IPFS_HASH)  
          __(Recommended)__ _requires Brave Browser or IPFS Desktop_  
          [https://$IPFS_HASH.ipfs.dweb.link](https://$IPFS_HASH.ipfs.dweb.link)  
          [https://$IPFS_HASH.ipfs.w3s.link](https://$IPFS_HASH.ipfs.w3s.link)  
          [https://$IPFS_HASH.ipfs.nftstorage.link](https://$IPFS_HASH.ipfs.nftstorage.link)  
          [https://$IPFS_HASH.ipfs.zoltu.io](https://$IPFS_HASH.ipfs.zoltu.io)  
          EOF
          )

          # Generate payload for creating a new release
          PAYLOAD_TEMPLATE=$(cat <<EOF
          {
            "name": "$GITHUB_REF_NAME",
            "tag_name": "$GITHUB_REF_NAME",
            "body": $(echo "$RELEASE_NOTE_TEMPLATE" | jq -cRs '@json|fromjson'),
            "draft": false,
            "generate_release_notes": true
          }
          EOF
          )

          # Create a github release
          # https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#create-a-release
          REQUEST_DATA=$(echo "$PAYLOAD_TEMPLATE" | jq -c)
          RESPONSE=$(curl \
            --silent \
            --location \
            --request POST \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $GITHUB_TOKEN" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --data "$REQUEST_DATA" \
            --write-out "%{http_code}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases"
          )

          # Extract the response body and the appended http code
          RESPONSE_CODE=${RESPONSE: -3}
          RESPONSE_BODY=${RESPONSE//$RESPONSE_CODE/}

          # Successful creation will return a status 201 (Created), otherwise show the error
          if [ "$RESPONSE_CODE" -ne  201 ]; then
            ERROR_MESSAGE=$(echo "$RESPONSE_BODY" | jq '.message')
            echo "HTTP $RESPONSE_CODE - $ERROR_MESSAGE"
            exit 1
          fi

          echo "Release ($GITHUB_REF_NAME) successfully created"
